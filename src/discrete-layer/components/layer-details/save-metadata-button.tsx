import React, { useCallback, useContext, useMemo } from 'react';
import { useIntl } from 'react-intl';
import { IconButton, Tooltip } from '@map-colonies/react-core';
import { EntityDescriptorModelType, useStore } from '../../models';
import { IDispatchAction } from '../../models/actionDispatcherStore';
import { ILayerImage } from '../../models/layerImage';
import { getBasicType, getFlatEntityDescriptors } from './utils';
import { FieldInfoName } from './layer-details.field-info';
import EnumsMapContext, { IEnumsMapType } from '../../../common/contexts/enumsMap.context';

interface SaveMetadataProps {
  metadata: ILayerImage;
  className?: string;
}

export const SaveMetadataButton: React.FC<SaveMetadataProps> = ({
  metadata,
  className = ''
}) => {
  const intl = useIntl();
  const store = useStore();
  const { enumsMap } = useContext(EnumsMapContext);

  // Sorting out non-relevant properties from metadata
  const getfFilteredMetadataToDownload = useCallback(() => {
    // Generate enum types
    const enumBasicTypes = new Set(Object.values(enumsMap as IEnumsMapType).map(enumVal => enumVal.enumName));

    const descriptors = getFlatEntityDescriptors(
      metadata.__typename,
      store.discreteLayersStore.entityDescriptors as EntityDescriptorModelType[]
    );

    // Map Enum values
    const mappedEnumsMetadata = Object.fromEntries(
      Object.entries(metadata).map(([key, val]) => {
        const basicType = getBasicType(key as FieldInfoName, metadata.__typename);
        
        if(enumBasicTypes.has(basicType)) {
          return [key, enumsMap?.[val as string]?.realValue];
        }

        return [key, val];
      })
    );


    const pureMetadata = Object.fromEntries(
      Object.entries(mappedEnumsMetadata).filter(([key]) => {
        // Filter out auto-generated fields and map to metadata property names.
        const creationFieldsNames = descriptors
          .filter((descriptor) => !(descriptor.isAutoGenerated as boolean))
          .map((descriptor) => descriptor.fieldName);

        return creationFieldsNames.includes(key);
      })
    );

    return pureMetadata;
  }, [metadata]);

  const filteredMetadataToDownload = useMemo(getfFilteredMetadataToDownload, [metadata]);

  const dispatchAction = (action: Record<string, unknown>): void => {
    store.actionDispatcherStore.dispatchAction(
      {
        action: action.action,
        data: action.data,
      } as IDispatchAction
    );
  };

  const metadataExporter = useMemo((): JSX.Element => {
    return (
      <Tooltip
        content={intl.formatMessage({ id: 'action.saveMetadata.tooltip' })}
      >
        <IconButton
          className={`mc-icon-Save ${className}`}
          label="SAVE METADATA"
          onClick={(): void =>
             dispatchAction({ action: `${metadata.__typename}.saveMetadata`, data: filteredMetadataToDownload })
          }
        />
      </Tooltip>
    );
  }, [metadata]);

  return metadataExporter;
};
