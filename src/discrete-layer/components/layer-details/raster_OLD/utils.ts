import { isArray, isEmpty } from 'lodash';
import { IServerError } from '../../../../common/components/error/graphql.error-presentor';
import { EntityDescriptorModelType } from '../../../models';
import { getFlatEntityDescriptors } from '../utils';

const PP_COMMON_PARAMS = ['resolutionMeter', 'resolutionDegree'];

export const getUIIngestionFieldDescriptors = (entityDescriptors: EntityDescriptorModelType[]) => {
  return getFlatEntityDescriptors('PolygonPartRecord', entityDescriptors)
    .filter((desc) => PP_COMMON_PARAMS.includes(desc.fieldName as string))
    .map(desc => {
      return {
        ...desc,
        isRequired: true,
        isAutoGenerated: false,
        infoMsgCode: ['info-general-tooltip.required'],
      }
    });
};

export const getGraphQLPayloadNestedObjectErrors = ( errorGraphQL: any ): number[] => {
  const ret: number[] = [];
  if (!isEmpty(errorGraphQL?.response)) {
    errorGraphQL?.response.errors?.forEach((error: IServerError) => {
      const regex = /\d+(?:\/\d+)*/g;
      const matches = error.serverResponse?.data.message.match(regex);
      if (isArray(matches)) {
        ret.push(parseInt(matches[0]));
      }
    })
  }
  return ret;
};