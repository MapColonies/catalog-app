import React, { useEffect } from 'react';
import { observer } from 'mobx-react';

import { useQuery, useStore } from '../../../models/RootStore';
import { EntityDescriptorModelType } from '../../../models';

export const EntityDescriptorsFetcher: React.FC = observer(() => {
  const store = useStore();
  const descriptorsQuery = useQuery((store) => store.queryEntityDescriptors({},
    ` type
    categories {
      category
      categoryTitle
      fields { 
        autocomplete {
          type
          value
        }
        fieldName
        label
        fullWidth
        infoMsgCode
        isManuallyEditable
        isRequired
        isAutoGenerated
        isCreationEssential
        isCopyable
        enumValues {
          dictionary 
        }
        subFields {
          fieldName
          label
          fullWidth
          isManuallyEditable
          isRequired
          isAutoGenerated
          isCopyable
          enumValues {
            dictionary
          }
        }
        validation {
          valueType
          errorMsgCode
          min
          max
          minLength
          maxLength
          pattern
          errorMsgTranslation
          required
          json
        }
      }
      __typename
    }`));
  
  useEffect(() => {
    if(!descriptorsQuery.loading){
      const descriptors = descriptorsQuery.data?.entityDescriptors as EntityDescriptorModelType[];
      store.discreteLayersStore.setEntityDescriptors([...descriptors]);
    }
  }, [descriptorsQuery.data, descriptorsQuery.loading, store.discreteLayersStore]);
  
  return (
    <></>
  );
});
